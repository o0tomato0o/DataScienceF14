.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
"
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
e1 <- 7369
e2 <- 'SMITH'
e3 <- 'CLERK'
e4 <- 7902
e5 <- '17-DEC-1980'
e6 <- 800
e7 <- 20
procedureT <- data.frame(e1,e2,e3,e4,e5,e6,e7)
col_headings <- c('EMPNO', 'ENAME', 'JOB', 'MGR', 'HIREDATE', 'SAL', 'DEPTNO')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
#ggplot(data = emps) + geom_histogram(aes(x = SAL))
procedureT
procedureT
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
e1 <- 7369
e2 <- 'SMITH'
e3 <- 'CLERK'
e4 <- 7902
e5 <- '17-DEC-1980'
e6 <- 800
e7 <- 20
procedureT <- data.frame(e1,e2,e3,e4,e5,e6,e7)
col_headings <- c('EMPNO', 'ENAME', 'JOB', 'MGR', 'HIREDATE', 'SAL', 'DEPTNO')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
#ggplot(data = emps) + geom_histogram(aes(x = SAL))
procedureT
ggplot(data = procedureT) + geom_histogram(aes(x = SAL))
library("ggplot2", lib.loc="~/R/win-library/3.0")
library("rJava", lib.loc="~/R/win-library/3.0")
library("RJDBC", lib.loc="~/R/win-library/3.0")
library("rstudio", lib.loc="~/R/win-library/3.0")
ggplot(data = procedureT) + geom_histogram(aes(x = SAL))
install.packages("ggplot")
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
#ggplot(data = procedureT) + geom_histogram(aes(x = SAL))
procedureT
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286A", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
#ggplot(data = procedureT) + geom_histogram(aes(x = SAL))
procedureT
library("ggplot2", lib.loc="~/R/win-library/3.0")
library("rJava", lib.loc="~/R/win-library/3.0")
library("RJDBC", lib.loc="~/R/win-library/3.0")
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(purchaseT)
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(purchases)
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedures)
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(purchases)
procedureT
procedureT
procedureT
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
dbDisconnect(jdbcConnection)
}
procedureT
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(purchaseT)
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
ggplot(data = procedureT)
ggplot(data = procedureT) + geom_histogram(aes(x = PROCEDURE_ID))
ggplot(data = procedureT) + geom_histogram(aes(x = PROCEDURE_ID, y = PROCEDURE_NAME))
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
providerT <- dbGetQuery(jdbcConnection, "select * from providers")
recordT <- dbGetQuery(jdbcConnection, "select * from records")
dbDisconnect(jdbcConnection)
}
"
Put the following into .bash_profile
export JAVA_HOME=`/usr/libexec/java_home`
. ./.bash_profile
Download ojdbc6.jar into ~/Downloads
sudo mv ~/Downloads/ojdbc6.jar $JAVA_HOME
"
# In the following, use your path instead of /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
# For Windows, your Java Home folder should be similar to: C:/Program Files/Java/jdk1.8.0_20
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.8.0_20')
options(java.parameters="-Xmx4g")
library(rJava)
# Output Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))
# Load RJDBC library
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# The following data.frame will be used as the default if emps can't be loaded from Oracle.
proc1 <- 1
proc2 <- 'Broken Shoulder'
procedureT <- data.frame(proc1,proc2)
col_headings <- c('PROCEDURE_ID', 'PROCEDURE_NAME')
names(procedureT) <- col_headings
possibleError <- tryCatch(
# In the following, use your username and password instead of "CS347_prof", "orcl_prof"
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_fao286", "orcl_fao286"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
procedureT <- dbGetQuery(jdbcConnection, "select * from procedures")
providerT <- dbGetQuery(jdbcConnection, "select * from provider")
recordT <- dbGetQuery(jdbcConnection, "select * from records")
dbDisconnect(jdbcConnection)
}
providerT
recordT
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
"Selecting a subset of rows from a dataframe:"
head(subset(procedureT, PROCEDURE_NAME == "DYSEQUILIBRIUM" & PROCEDURE_ID > 1400))
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
"Selecting a subset of rows from a dataframe:"
head(subset(procedureT, PROCEDURE_NAME == "DYSEQUILIBRIUM" & PROCEDURE_ID > 200))
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
"Selecting a subset of rows from a dataframe:"
head(subset(procedureT, PROCEDURE_NAME == "DYSEQUILIBRIUM" & PROCEDURE_ID > 100))
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
"Selecting a subset of rows from a dataframe:"
head(subset(procedureT, PROCEDURE_NAME == "DYSEQUILIBRIUM" & PROCEDURE_ID > 100))
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
"Selecting a subset of rows from a dataframe:"
head(subset(procedureT, procedure_name == "DYSEQUILIBRIUM" & PROCEDURE_ID > 100))
library("ggplot2")
"Displaying the top few rows of a dataframe:"
head(procedureT)
"Selecting a subset of columns from a dataframe:"
head(subset(procedureT, select = c(PROCEDURE_NAME)))
"Selecting a subset of rows from a dataframe:"
head(subset(procedureT, PROCEDURE_NAME == "DYSEQUILIBRIUM" & PROCEDURE_ID > 100))
providerT
library("plyr", lib.loc="~/R/win-library/3.0")
